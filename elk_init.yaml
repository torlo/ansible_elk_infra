- name: Playbook for configure ELK cluster
  hosts: "{{ remote_hosts }}"
  strategy: linear
  remote_user: ansible
  become: yes
  become_method: sudo

  vars:


  tasks:
    - name: Copy file etc/hosts to all servers on elk_cluster
      copy: src=/etc/ansible/inventory/vars/elk_cluster/hosts.j2 dest=/etc/hosts

    - name: install EPEL repo
      shell: "amazon-linux-extras install epel -y"

    - name: install Java
      yum: name={{ item }} state=present
      with_items:
        - java-1.8.0-openjdk
        - java-1.8.0-openjdk-devel

    - name: install elastic
      block:
        - name: install Elasticsearch
          yum: name=elasticsearch state=present

        - name: define configuration files for elastic1
          copy: src=/etc/ansible/inventory/vars/elk_cluster/elastic/elastic1.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml
          when: ansible_hostname == "elastic1"

        - name: define configuration files for elastic2
          copy: src=/etc/ansible/inventory/vars/elk_cluster/elastic/elastic2.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml
          when: ansible_hostname == "elastic2"

        - name: define configuration files for elastic3
          copy: src=/etc/ansible/inventory/vars/elk_cluster/elastic/elastic1.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml
          when: ansible_hostname == "elastic3"

        - name: start elasticsearch
          service: name=elasticsearch state=started enabled=yes
      when: ansible_hostname == "elastic*"

    - name: install logstash
      block:
        - name: Install logstash
          yum: name=logstash state=present

        - name: Copy files to dest servers
          copy: src={{ item.src }} dest={{ item.dest }}
          with_items:
              - { src: '/etc/ansible/inventory/vars/elk_cluster/logstash/02-beats-input.conf.j2', dest: '/etc/logstash/conf.d/02-beats-input.conf.j2' }
              - { src: '/etc/ansible/inventory/vars/elk_cluster/logstash/10-syslog-filter.conf.j2', dest: '/etc/logstash/conf.d/10-syslog-filter.conf' }
              - { src: '/etc/ansible/inventory/vars/elk_cluster/logstash/30-elasticsearch-output.conf.j2', dest: '/etc/logstash/conf.d/30-elasticsearch-output.conf' }

        - name: Start Logstash
          service: name=logstash state=started enabled=yes
      when: ansible_hostname == "logstash"

    - name: install kibana:
      block:
        - name: install kibana and nginx
          yum: name={{ item }} state=present
          with_items:
            - kibana
            - nginx
            - certbot
            - python2-certbot-nginx

        - name: Disable SELinux
          shell: "sudo setsebool httpd_can_network_connect 1 -P"

        - name: configure NGINX
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/nginx_default.conf dest=/etc/nginx/conf.d/default.conf

        - name: Copy Configure Certbot
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/le.tar dest=/etc/letsencrypt/le.tar

        - name: Copy Configure Certbot
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/kibana.yml dest=/etc/kibana/kibana.yml

        - name: Define elasticsearch.hosts on kibana.yml
          shell: "sed -i 's/elastic1ip/{{ elastic1ip }}/g' /etc/kibana/kibana.yml"

        - name: Decompress conf files
          shell: "cd /etc/letsencrypt/ && tar -xf le.tar"

        - name: Install oauth2
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/oauth2_proxy  dest=/sbin/oauth2_proxy

        - name: Define execution rights for oauth2
          shell: "chmod 744 /sbin/oauth2_proxy"

        - name: Configure oauth2
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/oauth_proxy.cfg  dest=/etc/oauth2_proxy.cfg

        - name: Define oauth2 as service
          copy: src=/etc/ansible/inventory/vars/elk_cluster/kibana/oauth2.service  dest=/etc/systemd/system/oauth2.service

        - name: Reload systemctl daemon
          shell: "systemctl daemon-reload"

        - name: Start nginx service
          service: name=nginx state=started enabled=yes

        - name: clear elk data 1
          shell: "curl -XDELETE http://{{elastic1ip}}:9200/.kibana_1"

        - name: clear elk data 2
          shell: "curl -XDELETE http://{{elastic1ip}}:9200/.kibana_2"

        - name: Start kibana service
          service: name=kibana state=started enabled=yes

        - name: Start oauth2 service
          service: name=oauth2 state=started enabled=yes
      when: ansible_hostname == "kibana"
